# Single workflow to increment Ersilia version in pyproject.toml,
# tag and push the commit to the repository, release to GitHub, PyPI, Conda, and DockerHub

name: Ersilia Release

on:
  workflow_dispatch: # run manually
  schedule:
    - cron: '0 3 1 * *' # run at 3:00 AM on the first day of the month
  
jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.version.outputs.VERSION }}
    steps:

      - name: Checkout persist credentials
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v3.5.3
        with:
          persist-credentials: false # ensures use of personal token instead of GITHUB_TOKEN
          fetch-depth: 0 # fetches all history for tagging
      
      - name: Increment package version
        id: version
        run: |
          wget https://raw.githubusercontent.com/ersilia-os/ersilia/master/.github/scripts/static_version_writer.py
          echo "VERSION=$(python static_version_writer.py)" >> "$GITHUB_OUTPUT"
          rm static_version_writer.py
      
      - name: Create a release tag
        id: tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.email "ersilia-bot@users.noreply.github.com"
          git config --local user.name "ersilia-bot"
          git tag -a "v${{ steps.version.outputs.VERSION }}" -m "v${{ steps.version.outputs.VERSION }}"
          git push origin "v${{ steps.version.outputs.VERSION }}"

      - name: Update version in CITATION.cff
        id: update-citation
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          pip install PyYAML
          python -c "
          import os
          import yaml
          with open('CITATION.cff', 'r') as file:
              content = file.read()
          citation = yaml.safe_load(content)
          citation['version'] = os.environ['VERSION']
          with open('CITATION.cff', 'w') as file:
              yaml.dump(citation, file, default_flow_style=False, sort_keys=False)
          "

      - name: Update version in codemeta.json
        id: update-codemeta
        env:
          VERSION: ${{ steps.version.outputs.VERSION }}
        run: |
          # Ensure jq is installed
          sudo apt-get install -y jq
          # Update the version in codemeta.json
          jq '.version = env.VERSION' codemeta.json > codemeta_tmp.json && mv codemeta_tmp.json codemeta.json

      - name: Commit and push changes to CITATION.cff and codemeta.json
        uses: actions-js/push@5a7cbd780d82c0c937b5977586e641b2fd94acc5 # pin@v1.5
        with:
          author_name: "ersilia-bot"
          author_email: "ersilia-bot@users.noreply.github.com"
          message: "Update version in CITATION.cff and codemeta.json [skip ci]"
          repository: "ersilia-os/${{ github.event.repository.name }}"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          amend: true
          force: true
          branch: "master"
          tags: true

  gh-release:
    runs-on: ubuntu-latest
    needs: version
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub release
        id: gh_release
        run: |
          month=$(date +'%B')
          year=$(date +'%Y')
          title="$month $year"
          version=${{ needs.version.outputs.VERSION }}
          git fetch --tags
          gh release create "v$version" --title "$title" --generate-notes

  pypi-release:
    runs-on: ubuntu-latest
    needs: version
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # pin@v3.5.3
        with:
          ref: master

      - name: Set up Python
        uses: actions/setup-python@f677139bbe7f9c59b41e40162b753c062f5d49a3 # pin@v5.2.0
        with:
          python-version: '3.8'

      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v3.0.0
            
      - name: Build and publish
        env:
          PYPI_USERNAME: ${{ secrets.PYPI_USERNAME }}
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          git pull origin master 
          poetry config -- http-basic.pypi $PYPI_USERNAME $PYPI_PASSWORD
          poetry --build publish
